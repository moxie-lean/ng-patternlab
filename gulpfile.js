'use strict';

var gulp = require('gulp');
var templateCache = require('gulp-angular-templatecache');
var fs = require('fs');
var glob = require('glob');
var htmlEscape = require('html-escape');

var commonHeader = 'AUTO-GENERATED BY GULP';
var templateHeader = 'angular.module("lnPatterns").run(["$templateCache", function($templateCache) {';

gulp.task('lnPatternsComponents', function(cb){
  var contents = '/*** ' + commonHeader + ' ***/\n\n';
  var web = '<!-- ' + commonHeader + ' -->\n\n';

  var include = function(file) {
    var folder = file.split('/').slice(2, -1).join('/');
    contents += "require('./" + folder + "/directive');\n";

    var metadata = require('./lib/' + folder + '/metadata.json');
    web += '<!-- ' + metadata.name + '-->\n';
    web += '<div style="padding: 20px;">\n';
    web += '<h3><u>' + metadata.name + '</u></h3>\n';
    web += '<code style="display: block; margin-bottom: 10px;">' + metadata.description + '</code>\n';
    web += '<code style="display: block; margin-bottom: 10px;">Params: ' + JSON.stringify(metadata.params) + '</code>\n';
    web += '<code>' + htmlEscape(fs.readFileSync('./lib/' + folder + '/example.html', 'utf8')) + '</code>\n';
    web += '</div>\n';
    web += '<hr/>\n\n';
  };

  contents += '// ATOMS:\n';
  glob.sync('./lib/atoms/**/directive.js').forEach(include);

  contents += '\n// MOLECULES:\n';
  glob.sync('./lib/molecules/**/directive.js').forEach(include);

  contents += '\n// ORGANISMS:\n';
  glob.sync('./lib/organisms/**/directive.js').forEach(include);

  contents += '\n// TEMPLATES:\n';
  glob.sync('./lib/templates/**/directive.js').forEach(include);

  fs.writeFile('./lib/ngComponents.js', contents, function(){
    fs.writeFile('./lib/templates/patterns/template.html', web, cb);
  });
});

gulp.task('lnPatternsTemplates', ['lnPatternsComponents'], function() {
  return gulp.src('./lib/**/template.html')
    .pipe(templateCache('ngTemplates.js', {
      transformUrl: function(url) {
        if (url.indexOf('templates/patterns/template.html') >= 0)
          return url;
        else
          return 'lnPatterns/' + url;
      },
      templateHeader: ('/*** ' + commonHeader + ' ***/\n\n' + templateHeader)
    }))
    .pipe(gulp.dest('./lib'));
});

gulp.task('lnPatterns', ['lnPatternsTemplates']);