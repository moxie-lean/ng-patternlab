'use strict';

//
// imports
//
var gulp = require('gulp');
var gutil = require('gulp-util');
var templateCache = require('gulp-angular-templatecache');
var fs = require('fs');
var glob = require('glob');
var path = require('path');
var _ = require('lodash');

//
// constants
//
var CONFIG_FILE = '../../config/patterns.json';
var COMMON_HEADER = 'AUTO-GENERATED BY GULP';
var COMMON_HEADER_JS = '/*** ' + COMMON_HEADER + ' ***/';
var COMMON_HEADER_HTML = '<!-- ' + COMMON_HEADER + ' -->';
var TEMPLATE_CACHE_HEADER = COMMON_HEADER_JS + '\n\n' + 'angular.module("lnPatterns").run(["$templateCache", function($templateCache) {';
var PATTERNS_TEMPLATE = 'templates/patterns/template';
var PATTERNS_TEMPLATE_PAGE = PATTERNS_TEMPLATE + '.html';
var ENCODING = 'utf8';
var HEADER_REGEX = /\/\*\*\*.*\*\*\*\//;
var COMPONENT_REGEX = /{COMPONENT}[\s\S]*{END_COMPONENT}/m;
var EXAMPLE_REGEX = /{EXAMPLE}[\s\S]*{END_EXAMPLE}/m;
var CONTROLLER_REGEX = /{CONTROLLER}[\s\S]*{END_CONTROLLER}/m;

//
// global variables
//
var appConfig = null;
var enabledTemplates = [];

//
// tasks
//
gulp.task('lnPatternsLoadConfig', function (cb) {
    //load application config file
    try {
        appConfig = require(CONFIG_FILE);
    }
    catch (e) {
        gutil.log('Application config file not found. All components will be included.');
    }

    cb();
});

gulp.task('lnPatternsComponents', ['lnPatternsLoadConfig'], function (cb) {
    var atoms = '';
    var molecules = '';
    var organisms = '';
    var templates = '';
    var controllers = '';
    var count = 0;

    //read tpl files
    var componentsTpl = fs.readFileSync('./lib/ngComponents.tpl', ENCODING);
    componentsTpl = componentsTpl.replace(HEADER_REGEX, COMMON_HEADER_JS);

    var controllersTpl = fs.readFileSync('./lib/ngControllers.tpl', ENCODING);
    controllersTpl = controllersTpl.replace(HEADER_REGEX, COMMON_HEADER_JS);

    var patternsTpl = fs.readFileSync('./lib/' + PATTERNS_TEMPLATE + '.tpl', ENCODING);
    patternsTpl = patternsTpl.replace(HEADER_REGEX, COMMON_HEADER_HTML);

    //get component and example htmls and controller js from tpls
    var componentHtml = COMPONENT_REGEX.exec(patternsTpl)[0];
    componentHtml = componentHtml.replace('{COMPONENT}', '').replace('{END_COMPONENT}', '');

    var exampleHtml = EXAMPLE_REGEX.exec(componentHtml)[0];
    exampleHtml = exampleHtml.replace('{EXAMPLE}', '').replace('{END_EXAMPLE}', '');

    var controllerJs = CONTROLLER_REGEX.exec(controllersTpl)[0];
    controllerJs = controllerJs.replace('{CONTROLLER}', '').replace('{END_CONTROLLER}', '');

    //clean patterns tpl
    patternsTpl = patternsTpl.replace(COMPONENT_REGEX, '');

    var include = function (file, collection) {
        var splitted = file.split('/');
        var folder = splitted.slice(2, -1).join('/');
        var filename = splitted.pop().replace('.js', '');
        var compEnabled = true;
        var compConfig = null;

        //check if the component is enabled in the application config file
        if (appConfig) {
            if (!_.has(appConfig, 'enabledComponents'))
                compEnabled = false;
            else if (_.isArray(appConfig.enabledComponents)) {
                compConfig = _.find(appConfig.enabledComponents, {'component': folder});

                if (!compConfig)
                    compEnabled = false;
            }
            else if (appConfig.enabledComponents != '*')
                compEnabled = false;
        }

        if (compEnabled) {
            //get component metadata
            var metadata = require('./lib/' + folder + '/metadata.json');

            //include import string into the corresponding atomic type
            var reqStr = "require('./" + folder + "/" + filename + "');\n";

            if (collection == 'atoms')
                atoms += reqStr;
            else if (collection == 'molecules')
                molecules += reqStr;
            else if (collection == 'organisms')
                organisms += reqStr;
            else
                templates += reqStr;

            if (filename.indexOf('directive') >= 0 || filename.indexOf('component') >= 0) {
                count += 1;

                //get component example instance html
                var exampleInstanceHtml = fs.readFileSync('./lib/' + folder + '/example.html', ENCODING);

                //generate examples with instantiated parameters
                var examples = '';

                if (compConfig && _.has(compConfig, 'examples') && _.isArray(compConfig.examples)) {
                    for (var i = 0; i < compConfig.examples.length; i++) {
                        var exampleInstance = compConfig.examples[i];
                        var controllerName = 'lnController_' + count + '_' + i;
                        var controllerAttrs = JSON.stringify(exampleInstance.params);

                        examples += exampleHtml
                            .replace(/{EXAMPLE_CONTROLLER}/g, controllerName)
                            .replace(/{EXAMPLE_NAME}/g, exampleInstance.name)
                            .replace(/{EXAMPLE_BG_COLOR}/g, (exampleInstance.bgColor || 'white'))
                            .replace(/{EXAMPLE_PARAMS}/g, controllerAttrs)
                            .replace(/{EXAMPLE_INSTANCE}/g, exampleInstanceHtml);

                        controllers += controllerJs
                            .replace(/{CONTROLLER_NAME}/g, controllerName)
                            .replace(/{CONTROLLER_ATTRIBUTES}/g, controllerAttrs);
                    }
                }

                //instantiate component html and include into patterns tpl
                patternsTpl += componentHtml
                    .replace(/{COMPONENT_NAME}/g, metadata.name)
                    .replace(/{COMPONENT_DESCRIPTION}/g, metadata.description)
                    .replace(/{COMPONENT_PARAMS}/g, JSON.stringify(metadata.params))
                    .replace(/{COMPONENT_EXAMPLE}/g, _.escape(exampleInstanceHtml))
                    .replace(EXAMPLE_REGEX, examples);

                //add component path to the enabled templates list
                enabledTemplates.push('./lib/' + folder + '/template.html');
            }
        }
    };

    glob.sync('./lib/atoms/**/*.js').forEach(function (file) {
        include(file, 'atoms');
    });
    glob.sync('./lib/molecules/**/*.js').forEach(function (file) {
        include(file, 'molecules');
    });
    glob.sync('./lib/organisms/**/*.js').forEach(function (file) {
        include(file, 'organisms');
    });
    glob.sync('./lib/templates/**/*.js').forEach(function (file) {
        include(file, 'templates');
    });

    //instantiate components imports and generate ngComponents.js
    componentsTpl = componentsTpl
        .replace('{ATOMS}', atoms)
        .replace('{MOLECULES}', molecules)
        .replace('{ORGANISMS}', organisms)
        .replace('{TEMPLATES}', templates);

    fs.writeFileSync('./lib/ngComponents.js', componentsTpl);

    //generate controllers and patterns page
    var filePath = './lib/' + PATTERNS_TEMPLATE_PAGE;

    if (!appConfig || appConfig.generatePatternsPage) {
        enabledTemplates.push(filePath);

        //generate patterns page
        fs.writeFileSync(filePath, patternsTpl);
    }
    else {
        //delete patterns page if exists
        try {
            fs.unlinkSync(filePath);
        } catch (e) {
        }

        //clean controllers
        controllers = '';
    }

    //instantiate controllers and generate ngControllers.js
    controllersTpl = controllersTpl.replace(CONTROLLER_REGEX, controllers);
    fs.writeFileSync('./lib/ngControllers.js', controllersTpl);

    cb();
});

gulp.task('lnPatternsTemplates', ['lnPatternsComponents'], function () {
    return gulp.src(enabledTemplates, {base: path.resolve(__dirname + '/lib/')})
        //generate templates cache into ngTemplates.js
        .pipe(templateCache('ngTemplates.js', {
            transformUrl: function (url) {
                if (url.indexOf(PATTERNS_TEMPLATE_PAGE) >= 0)
                    return PATTERNS_TEMPLATE_PAGE;
                else
                    return /*'lnPatterns' +*/ url.substring(1);
            },
            templateHeader: TEMPLATE_CACHE_HEADER
        }))
        //write ngTemplates.js into lib folder
        .pipe(gulp.dest('./lib'));
});

gulp.task('lnPatterns', ['lnPatternsTemplates']);
